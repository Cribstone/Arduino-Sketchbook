/*
* Nunchuck.h
* Arduino library to interface with wii Nunchuck
*/
#ifndef Nunchuck_included
#define Nunchuck_included
// identities for each field provided by the wii nunchuck
enum nunchuckItems { wii_joyX, wii_joyY, wii_accelX, wii_accelY, wii_accelZ,
wii_btnC, wii_btnZ, wii_ItemCount };
// uses pins adjacent to I2C pins as power & ground for Nunchuck
void nunchuckSetPowerpins();
// initialize the I2C interface for the nunchuck
void nunchuckInit();
// Request data from the nunchuck
void nunchuckRequest();
// Receive data back from the nunchuck,
// returns true if read successful, else false
bool nunchuckRead();
// Encode data to format that most wiimote drivers except
char nunchuckDecode (uint8_t x);
// return the value for the given item
int nunchuckGetValue(int item);
#endif
16.5 Creating a Library That Uses Other Libraries | 575}
Wire.begin();
//
Wire.beginTransmission(0x52);//
Wire.write((byte)0x40);
//
Wire.write((byte)0x00);
//
Wire.endTransmission();
//
join i2c bus as master
transmit to device 0x52
sends memory address
sends sent a zero.
stop transmitting
// Request data from the nunchuck
void nunchuckRequest()
{
Wire.beginTransmission(0x52);// transmit to device 0x52
Wire.write((byte)0x00);// sends one byte
Wire.endTransmission();// stop transmitting
}
// Receive data back from the nunchuck,
// returns true if read successful, else false
bool nunchuckRead()
{
byte cnt=0;
Wire.requestFrom (0x52, dataLength);// request data from nunchuck
while (Wire.available ()) {
byte x = Wire.read();
rawData[cnt] = nunchuckDecode(x);
cnt++;
}
nunchuckRequest(); // send request for next data payload
if (cnt >= dataLength)
return true;
// success if all 6 bytes received
else
return false; // failure
}
// Encode data to format that most wiimote drivers except
char nunchuckDecode (byte x)
{
return (x ^ 0x17) + 0x17;
}
// return the value for the given item
int nunchuckGetValue(int item)
{
if( item <= wii_accelZ)
return (int)rawData[item];
else if(item == wii_btnZ)
return bitRead(rawData[5], 0) ? 0: 1;
else if(item == wii_btnC)
return bitRead(rawData[5], 1) ? 0: 1;
}
