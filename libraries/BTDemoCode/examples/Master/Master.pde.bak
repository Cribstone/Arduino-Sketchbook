/*
BluetoothShield Demo Code
2010 Copyright (c) Seeed Technology Inc.  All right reserved.
 
Author: Steve Chang
 
This demo code is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 
For more details about the product please check http://www.seeedstudio.com/depot/
 
*/
 
 
/* Upload this sketch into Seeeduino and press reset*/
#include <NewSoftSerial.h>   //Software Serial Port
#define RxD 6
#define TxD 7
 
#define DEBUG_ENABLED  1

String retSymb = "+RTINQ=";//start symble when there's any return
String slaveName = ";SeeedBTSlave";
int nameIndex = 0;
int addrIndex = 0;

String recvBuf;
String slaveAddr;

String connectCmd = "\r\n+CONN=";

NewSoftSerial blueToothSerial(RxD,TxD);
 
void setup() 
{ 
		Serial.begin(9600);
    pinMode(RxD, INPUT);
    pinMode(TxD, OUTPUT);
    setupBlueToothConnection();

    delay(1000);
 		Serial.flush();
 		blueToothSerial.flush();
} 
 
void loop() 
{ 
 char recvChar;
 while(1){
		if(blueToothSerial.available()){
 				recvChar = blueToothSerial.read();
 				Serial.print(recvChar);
 			}
 		if(Serial.available()){
 			recvChar  = Serial.read();
 			blueToothSerial.print(recvChar);
 			
 		}	
 }
 
 
} 
 
void setupBlueToothConnection()
{
    blueToothSerial.begin(38400); //Set BluetoothBee BaudRate to default baud rate 38400
    delay(1000);
    sendBlueToothCommand("\r\n+STWMOD=1\r\n");
    sendBlueToothCommand("\r\n+STNA=SeeedBTMaster\r\n");
    //sendBlueToothCommand("\r\n+STAUTO=0\r\n");
    //sendBlueToothCommand("\r\n+STOAUT=1\r\n");
    //sendBlueToothCommand("\r\n +STPIN=0000\r\n");
    delay(2000); // This delay is required.
    blueToothSerial.flush();
    sendBlueToothCommand("\r\n+INQ=1\r\n");
    delay(2000); // This delay is required.
    
    //find the target slave
    char recvChar;
 		while(1){
 			if(blueToothSerial.available()){
 				recvChar = blueToothSerial.read();
 				recvBuf += recvChar;
 				nameIndex = recvBuf.indexOf(slaveName);
 				if ( nameIndex != -1 ){
 					//Serial.print(recvBuf);
 					addrIndex = (recvBuf.indexOf(retSymb,(nameIndex - retSymb.length()- 18) ) + retSymb.length());	 		
 					slaveAddr = recvBuf.substring(addrIndex, nameIndex);			
 					break;
 				}
 			}
 		}
	connectCmd += slaveAddr;
	connectCmd += "\r\n";
	int connectOK = 0;
	Serial.print("Connecting:");
	Serial.print(slaveAddr);
	Serial.println(slaveName);
	do{
		blueToothSerial.print(connectCmd);//send connection command
		recvBuf = "";
 		while(1){
			if(blueToothSerial.available()){
 				recvChar = blueToothSerial.read();
 				recvBuf += recvChar;
 				if(recvBuf.indexOf("CONNECT:OK") != -1){
 					connectOK = 1;
 					Serial.println("Connected!");
 					blueToothSerial.print("Connected!");
 					break;
 				}else if(recvBuf.indexOf("CONNECT:FAIL") != -1){
 					Serial.println("Connect again!");
 					break;
 				}
 			}
 		}
 	}while(0 == connectOK);
}
 
//Checks if the response "OK" is received.
void CheckOK()
{
  char a,b;
  while(1)
  {
    if(int len = blueToothSerial.available())
    {
    a = blueToothSerial.read();
 
    if('O' == a)
    {
      b = blueToothSerial.read();
      if('K' == b)
      {
        break;
      }
 
    }
   }
  }
 
  while( (a = blueToothSerial.read()) != -1)
  {
    //Wait until all response chars are received
  }
}
 
//Send the command to Bluetooth Shield
void sendBlueToothCommand(char command[])
{
    blueToothSerial.print(command);
    CheckOK();   
}
