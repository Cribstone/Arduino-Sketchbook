
/**************************************************************************/
/*! 
    @file     read_mifare.pde
    @author   odopod thisispete
    @license 
    
    This file shows how to initialize either the SPI or I2C versions of the 
    pn532 development sheilds and read a mifare tag. 

*/
/**************************************************************************/


//compiler complains if you don't include this even if you turn off the I2C.h 
//@TODO: look into how to disable completely
#include <Wire.h>

//I2C:

#include <PN532_I2C.h>

#define IRQ   2
#define RESET 3

PN532 * board = new PN532_I2C(IRQ, RESET);

//end I2C -->

//SPI:

//#include <PN532_SPI.h>
//
//#define SCK 13
//#define MOSI 11
//#define SS 10
//#define MISO 12
//
//PN532 * board = new PN532_SPI(SCK, MISO, MOSI, SS);

//end SPI -->

#include <Mifare.h>
Mifare mifare;
//init keys for reading classic
uint8_t Mifare::useKey = KEY_B;
uint8_t Mifare::keyA[6] = {0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7 };
uint8_t Mifare::keyB[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
uint32_t Mifare::cardType = 0; //will get overwritten if it finds a different card

#include <NDEF.h>

#define PAYLOAD_SIZE 236
uint8_t payload[PAYLOAD_SIZE] = {};

void setup(void) {
  Serial.begin(115200);

  board->begin();

  uint32_t versiondata = board->getFirmwareVersion();
  if (! versiondata) {
    Serial.println("err");
    while (1); // halt
  }
  
  // Got ok data, print it out!
  Serial.print("5");Serial.println((versiondata>>24) & 0xFF, HEX); 
//  Serial.print("v: "); Serial.println((versiondata>>16) & 0xFF, DEC); 
//  Serial.println((versiondata>>8) & 0xFF, DEC);
//  Serial.print("Supports "); Serial.println(versiondata & 0xFF, HEX);
  


  if(mifare.SAMConfig()){
    Serial.println("ok");  
  }else{
    Serial.println("er");
  }
  
  
}



void loop(void) {
 uint8_t * uid = mifare.readTarget();
 if(uid){
   Serial.println(Mifare::cardType == MIFARE_CLASSIC ?"Classic" : "Ultralight");
    
    memset(payload, 0, PAYLOAD_SIZE);

//write URI

      memcpy(payload, "odopod.com", 10);
      uint8_t len = NDEF().encode_URI(NDEF_URIPREFIX_HTTP, payload);


//write plain text

//      memcpy(payload, "this is some text", 17);
//      uint8_t len = NDEF().encode_TEXT((uint8_t *)"en", payload);
      
//write mime
//      static uint8_t bitmapdata[220] = {0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x12, 0x00, 0x12, 0x00, 0xb3, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xff, 0xff, 0x99, 0xff, 0xcc, 0x99, 0xff, 0xcc, 0x66, 0xff, 0xcc, 0x33, 0xcc, 0x99, 0x33, 0xcc,0x99, 0x00, 0x99, 0x66, 0x00, 0x66, 0x66, 0x00, 0x66, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x04, 0x7c, 0x10, 0xc8, 0x99, 0x6a, 0x45, 0x33, 0x53, 0x74, 0x8a, 0x37, 0x07, 0x92, 0x68, 0x52, 0x72, 0x10, 0x43, 0x9a, 0x12, 0x20, 0x96, 0x25, 0x45, 0x2a, 0x04, 0xb4, 0xb0, 0x1a, 0x63, 0x79, 0xc8, 0x74, 0xaf, 0x12, 0x87, 0x1c, 0x02, 0x35, 0x53, 0x28, 0x68, 0xc6, 0x1b, 0xc6, 0x94, 0x42, 0x1e, 0x03, 0x46, 0xdb, 0x00, 0x58, 0x31, 0x0c, 0x66, 0xd0, 0x67, 0xf4, 0x56, 0x1d, 0xf4, 0x8c, 0xce, 0x5f, 0xa1, 0x8b, 0xed, 0x09, 0xa4, 0xab, 0x71, 0xc2, 0x40, 0xac, 0xa9, 0x7e, 0xac, 0xca, 0x69, 0xa0, 0x78, 0xbf, 0x15, 0x04, 0x2a, 0x00, 0xc1, 0xa6, 0xdb, 0xe9, 0x79, 0x06, 0x2e, 0x26, 0x79, 0x74, 0x46, 0x87, 0x79, 0x7a, 0x12, 0x7c, 0x89, 0x8d, 0x89, 0x38, 0x1a, 0x26, 0x6c, 0x8e, 0x20, 0x39, 0x91, 0x1c, 0x06, 0x99, 0x2d, 0x96, 0x24, 0x00, 0x16, 0x16, 0x24, 0x11, 0x00, 0x3b};

//      memcpy(payload, bitmapdata, 220);
//      uint8_t len = NDEF().encode_MIME((uint8_t *)"image/gif", payload, 220);
      
      boolean success = mifare.writePayload(payload, len);
      Serial.println(success ? "success" : "fail");
 }
 delay(5000);
}
